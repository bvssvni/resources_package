//! Defines the `Package` struct that is generated by the `resources_package!` macro.

#![feature(tuple_indexing)]
#![unstable]

/// Represents a package of resources created by `resources_package!`.
pub struct Package {
    /// This member is public for technical reasons. Don't use it directly.
    pub data: &'static [(&'static [u8], &'static [u8])]
}

impl Package {
    /// Attempts to find a resource in the package.
    ///
    /// The parameter is a path relative to the directory specified in the macro. For example if
    ///  if you call `resources_package!("../resources")`, calling `find` with `images/file.png`
    ///  will attempt to find the file that was at `../resources/images/file.png` at compile-time.
    ///
    /// Returns the content of the file, or `None` if it was not found.
    ///
    /// If multiple resources have the same path, the first one will be returned. You should try
    ///  to avoid this situation.
    pub fn find(&self, resource: &Path) -> Option<&'static [u8]> {
        self.data.iter().find(|&&(path, _)| {
            Path::new(path) == *resource
        }).map(|v| v.1)
    }

    /// Returns an iterator to the entries in the package.
    ///
    /// The return type implements `Iterator<&(Path, &'static u8)>`.
    pub fn iter<'a>(&'a self) -> std::iter::Map<'a, &(&[u8],&[u8]), (Path, &[u8]), std::slice::Items<'a, (&[u8],&[u8])>> {
        self.data.iter().map(|&(path, content)| (Path::new(path), content))
    }
}
